
"""
Solving problems using for loops.

We expect that you be able to solve all these problems, before attempting the
quizzes associated with this module.

DON'T HESITATE TO STOP BY OFFICE HOURS IF YOU HAVE QUESTIONS!!

Author: ??
"""

from csc121.audio import read_wav, write_wav


def negate_list():
    """
    What is the output of this function? ANSWER WITHOUT EXECUTING THE
    CODE; you can verify your answer when you think you have it by then running
    this code. Can you explain the result?
    """
    some_list = [3, 7, 9, 14]

    for i in some_list:
        i = i * -1

    print(some_list)


def slow_down():
    """
    Slows down the audio clip 'chicken.wav'.

    This can be achieved by 'stuttering' a list. Suppose we start with the
    list [2, 5, 7, 9], the stuttered list is [2, 2, 5, 5, 7, 7, 9, 9]. This
    new list, if it corresponds to audio data, will play at half the speed
    of the original (can you see why?).
    """
    # COMPLETE ME!

    




def swap_pairs():
    """
    Prompts the user to enter a list of integers, performs a pairwise
    swap of the elements in the list and prints out the new list.

    For example, if the user entered the list [10, 20, 30, 40], then
    the new list should be [20, 10, 40, 30]. You may assume that the
    list will be of even length.
    """
    # Just as the int() function can be used to turn a user entered string
    # into an integer, the eval() function turns the user entered string into
    # a list (well, that's not quite what it does in general, but it's a
    # sufficiently good approximation in this case). You don't have to modify
    # this line, just use the variable original_list in your solution as
    # though it were just another list.
    original_list = eval(input("Enter a list of integers: "))
    new_list = []
    for i in range(0, len(original_list), 2):
        new_list.append(original_list[i + 1])
        new_list.append(original_list[i])
    print(new_list)




    # COMPLETE ME!


def cube_sum():
    """
    Prints out the value of the sum 1^3 + 2^3 + ... + 20^3, i.e. the sum
    of the cubes of the first 20 positive integers. Post on Slack (on the
    #module-f channel) to verify your
    answer with another person!
    """
    # COMPLETE ME!
    total = 0
    for i in range(1, 21):
        total += i ** 3
    print(total)


def factorial():
    """
    Prints out the value of 20! = 20 * 19 * 18 * ... * 2 * 1, i.e., the product
    of the first 20 positive integers. As with the previous problem, post your
    answer on Slack (#module-f) to check your answer against others'.
    """
    product = 1
    for i in range(1, 21):
        product *= i
    print(product)


def fibonacci():
    """
    Prints out a list containing the first 20 numbers in the Fibonacci sequence.

    The Fibonacci sequence is ubiquitous in nature, where it has been used to
    model the reproductive behavior of bees and the geometric patterns in the
    shapes of flowers and pinecones. The rock band Tool even used it as the
    time signature for one of their songs (Lateralus).

    The sequence begins with the numbers 0 and 1. These are the first two terms.
    Each subsequent term is generated by adding together the previous two terms.

    We recommend accumulating the terms of the sequence in a list and then
    printing out the entire list when you are done. The output produced by this
    function should look like the following (for the sake of brevity, only the
    first few elements are shown):

    [0, 1, 1, 2, 3, 5, 8, ...]

    You can verify your answer by posting the last number that your code prints
    to Slack (#module-f) and comparing it against others'.

    HINT: Consider using negative list indices to extract the last two elements
    of the list, when generating the next element.
    """
    # COMPLETE ME!
    fib_list = [0, 1]
    for _ in range(18):
        next_fib = fib_list[-1] + fib_list[-2]
        fib_list.append(next_fib)
    print(fib_list)